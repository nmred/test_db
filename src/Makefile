# Makefile.in generated by automake 1.9.6 from Makefile.am.
# Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



srcdir = .
top_srcdir = .

pkgdatadir = $(datadir)/emeralddb
pkglibdir = $(libdir)/emeralddb
pkgincludedir = $(includedir)/emeralddb
top_builddir = .
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
bin_PROGRAMS = emeralddb$(EXEEXT) edb$(EXEEXT) hello$(EXEEXT)
subdir = .
DIST_COMMON = $(am__configure_deps) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in $(srcdir)/config.h.in \
	$(top_srcdir)/configure depcomp install-sh missing
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \
 configure.lineno configure.status.lineno
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = config.h
CONFIG_CLEAN_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
PROGRAMS = $(bin_PROGRAMS)
am_edb_OBJECTS = edb-edb.$(OBJEXT) edb-command.$(OBJEXT) \
	edb-commandFactory.$(OBJEXT) edb-bsonobj.$(OBJEXT) \
	edb-json.$(OBJEXT) edb-oid.$(OBJEXT) edb-base64.$(OBJEXT) \
	edb-md5.$(OBJEXT) edb-nonce.$(OBJEXT) edb-ossSocket.$(OBJEXT) \
	edb-ossPrimitiveFileOp.$(OBJEXT) edb-msg.$(OBJEXT) \
	edb-pd.$(OBJEXT)
edb_OBJECTS = $(am_edb_OBJECTS)
edb_DEPENDENCIES =
am_emeralddb_OBJECTS = emeralddb-ossSocket.$(OBJEXT) \
	emeralddb-ossPrimitiveFileOp.$(OBJEXT) \
	emeralddb-pmdEDU.$(OBJEXT) emeralddb-pmdEDUMgr.$(OBJEXT) \
	emeralddb-pmdAgent.$(OBJEXT) \
	emeralddb-pmdTcpListener.$(OBJEXT) emeralddb-bsonobj.$(OBJEXT) \
	emeralddb-json.$(OBJEXT) emeralddb-oid.$(OBJEXT) \
	emeralddb-base64.$(OBJEXT) emeralddb-md5.$(OBJEXT) \
	emeralddb-nonce.$(OBJEXT) emeralddb-msg.$(OBJEXT) \
	emeralddb-pd.$(OBJEXT) emeralddb-pmdOptions.$(OBJEXT) \
	emeralddb-pmd.$(OBJEXT) emeralddb-pmdMain.$(OBJEXT)
emeralddb_OBJECTS = $(am_emeralddb_OBJECTS)
emeralddb_DEPENDENCIES =
am_hello_OBJECTS = hello-bsonobj.$(OBJEXT) hello-json.$(OBJEXT) \
	hello-oid.$(OBJEXT) hello-base64.$(OBJEXT) hello-md5.$(OBJEXT) \
	hello-nonce.$(OBJEXT) hello-ossPrimitiveFileOp.$(OBJEXT) \
	hello-pd.$(OBJEXT) hello-pmdHello.$(OBJEXT)
hello_OBJECTS = $(am_hello_OBJECTS)
hello_DEPENDENCIES =
DEFAULT_INCLUDES = -I. -I$(srcdir) -I.
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
SOURCES = $(edb_SOURCES) $(emeralddb_SOURCES) $(hello_SOURCES)
DIST_SOURCES = $(edb_SOURCES) $(emeralddb_SOURCES) $(hello_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
distdir = $(PACKAGE)-$(VERSION)
top_distdir = $(distdir)
am__remove_distdir = \
  { test ! -d $(distdir) \
    || { find $(distdir) -type d ! -perm -200 -exec chmod u+w {} ';' \
         && rm -fr $(distdir); }; }
DIST_ARCHIVES = $(distdir).tar.gz
GZIP_ENV = --best
distuninstallcheck_listfiles = find . -type f -print
distcleancheck_listfiles = find . -type f -print
ACLOCAL = ${SHELL} /root/code/test_db/src/missing --run aclocal-1.9
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /root/code/test_db/src/missing --run tar
AUTOCONF = ${SHELL} /root/code/test_db/src/missing --run autoconf
AUTOHEADER = ${SHELL} /root/code/test_db/src/missing --run autoheader
AUTOMAKE = ${SHELL} /root/code/test_db/src/missing --run automake-1.9
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = 
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = 
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = grep -E
EXEEXT = 
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS = 
LTLIBOBJS = 
MAKEINFO = ${SHELL} /root/code/test_db/src/missing --run makeinfo
OBJEXT = o
PACKAGE = emeralddb
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
SET_MAKE = 
SHELL = /bin/sh
STRIP = 
VERSION = 1.0
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_STRIP = 
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build_alias = 
datadir = ${prefix}/share
exec_prefix = ${prefix}
host_alias = 
includedir = ${prefix}/include
infodir = ${prefix}/info
install_sh = /root/code/test_db/src/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localstatedir = ${prefix}/var
mandir = ${prefix}/man
mkdir_p = mkdir -p --
oldincludedir = /usr/include
prefix = /usr/local
program_transform_name = s,x,x,
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target_alias = 
AUTOMAKE_OPTIONS = foreign
emeralddb_SOURCES = \
   oss/ossSocket.cpp \
   oss/ossPrimitiveFileOp.cpp \
   pmd/pmdEDU.cpp \
   pmd/pmdEDUMgr.cpp \
   pmd/pmdAgent.cpp \
   pmd/pmdTcpListener.cpp \
   bson/src/bsonobj.cpp bson/src/util/json.cpp bson/src/oid.cpp \
   bson/src/lib/base64.cpp bson/src/lib/md5.cpp bson/src/lib/nonce.cpp \
   msg/msg.cpp \
   pd/pd.cpp pmd/pmdOptions.cpp pmd/pmd.cpp \
   pmd/pmdMain.cpp

edb_SOURCES = \
   client/edb.cpp client/command.cpp client/commandFactory.cpp \
   bson/src/bsonobj.cpp bson/src/util/json.cpp bson/src/oid.cpp \
   bson/src/lib/base64.cpp bson/src/lib/md5.cpp bson/src/lib/nonce.cpp \
   oss/ossSocket.cpp \
   oss/ossPrimitiveFileOp.cpp \
   msg/msg.cpp \
   pd/pd.cpp 

hello_SOURCES = \
   bson/src/bsonobj.cpp bson/src/util/json.cpp bson/src/oid.cpp \
   bson/src/lib/base64.cpp bson/src/lib/md5.cpp bson/src/lib/nonce.cpp \
   oss/ossPrimitiveFileOp.cpp \
   pd/pd.cpp \
   pmd/pmdHello.cpp

emeralddb_CXXFLAGS = -I../boost -Ibson/src -Iinclude -D_FILE_OFFSET_BITS=64 -ggdb -Wall -O0
emeralddb_LDADD = -lpthread -lm -lboost_system -lboost_thread -lboost_program_options -lrt
emeralddb_LDFLAGS = -fPIC -rdynamic -L../boost/stage/lib -pthread
edb_CXXFLAGS = -I../boost -Ibson/src -Iinclude -D_FILE_OFFSET_BITS=64 -ggdb -Wall -O0
edb_LDADD = -lm -lboost_system -lboost_thread -lrt
edb_LDFLAGS = -fPIC -rdynamic -L../boost/stage/lib
hello_CXXFLAGS = -I../boost -Ibson/src -Iinclude -D_FILE_OFFSET_BITS=64 -ggdb -Wall -O0
hello_LDADD = -lm -lboost_system -lboost_thread -lrt
hello_LDFLAGS = -fPIC -rdynamic -L../boost/stage/lib
all: config.h
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
.SUFFIXES: .cpp .o .obj
am--refresh:
	@:
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      echo ' cd $(srcdir) && $(AUTOMAKE) --foreign '; \
	      cd $(srcdir) && $(AUTOMAKE) --foreign  \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    echo ' $(SHELL) ./config.status'; \
	    $(SHELL) ./config.status;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	$(SHELL) ./config.status --recheck

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(srcdir) && $(AUTOCONF)
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(srcdir) && $(ACLOCAL) $(ACLOCAL_AMFLAGS)

config.h: stamp-h1
	@if test ! -f $@; then \
	  rm -f stamp-h1; \
	  $(MAKE) stamp-h1; \
	else :; fi

stamp-h1: $(srcdir)/config.h.in $(top_builddir)/config.status
	@rm -f stamp-h1
	cd $(top_builddir) && $(SHELL) ./config.status config.h
$(srcdir)/config.h.in:  $(am__configure_deps) 
	cd $(top_srcdir) && $(AUTOHEADER)
	rm -f stamp-h1
	touch $@

distclean-hdr:
	-rm -f config.h stamp-h1
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(mkdir_p) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) '$$p' '$(DESTDIR)$(bindir)/$$f'"; \
	   $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) "$$p" "$(DESTDIR)$(bindir)/$$f" || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
	done

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)
edb$(EXEEXT): $(edb_OBJECTS) $(edb_DEPENDENCIES) 
	@rm -f edb$(EXEEXT)
	$(CXXLINK) $(edb_LDFLAGS) $(edb_OBJECTS) $(edb_LDADD) $(LIBS)
emeralddb$(EXEEXT): $(emeralddb_OBJECTS) $(emeralddb_DEPENDENCIES) 
	@rm -f emeralddb$(EXEEXT)
	$(CXXLINK) $(emeralddb_LDFLAGS) $(emeralddb_OBJECTS) $(emeralddb_LDADD) $(LIBS)
hello$(EXEEXT): $(hello_OBJECTS) $(hello_DEPENDENCIES) 
	@rm -f hello$(EXEEXT)
	$(CXXLINK) $(hello_LDFLAGS) $(hello_OBJECTS) $(hello_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/edb-base64.Po
include ./$(DEPDIR)/edb-bsonobj.Po
include ./$(DEPDIR)/edb-command.Po
include ./$(DEPDIR)/edb-commandFactory.Po
include ./$(DEPDIR)/edb-edb.Po
include ./$(DEPDIR)/edb-json.Po
include ./$(DEPDIR)/edb-md5.Po
include ./$(DEPDIR)/edb-msg.Po
include ./$(DEPDIR)/edb-nonce.Po
include ./$(DEPDIR)/edb-oid.Po
include ./$(DEPDIR)/edb-ossPrimitiveFileOp.Po
include ./$(DEPDIR)/edb-ossSocket.Po
include ./$(DEPDIR)/edb-pd.Po
include ./$(DEPDIR)/emeralddb-base64.Po
include ./$(DEPDIR)/emeralddb-bsonobj.Po
include ./$(DEPDIR)/emeralddb-json.Po
include ./$(DEPDIR)/emeralddb-md5.Po
include ./$(DEPDIR)/emeralddb-msg.Po
include ./$(DEPDIR)/emeralddb-nonce.Po
include ./$(DEPDIR)/emeralddb-oid.Po
include ./$(DEPDIR)/emeralddb-ossPrimitiveFileOp.Po
include ./$(DEPDIR)/emeralddb-ossSocket.Po
include ./$(DEPDIR)/emeralddb-pd.Po
include ./$(DEPDIR)/emeralddb-pmd.Po
include ./$(DEPDIR)/emeralddb-pmdAgent.Po
include ./$(DEPDIR)/emeralddb-pmdEDU.Po
include ./$(DEPDIR)/emeralddb-pmdEDUMgr.Po
include ./$(DEPDIR)/emeralddb-pmdMain.Po
include ./$(DEPDIR)/emeralddb-pmdOptions.Po
include ./$(DEPDIR)/emeralddb-pmdTcpListener.Po
include ./$(DEPDIR)/hello-base64.Po
include ./$(DEPDIR)/hello-bsonobj.Po
include ./$(DEPDIR)/hello-json.Po
include ./$(DEPDIR)/hello-md5.Po
include ./$(DEPDIR)/hello-nonce.Po
include ./$(DEPDIR)/hello-oid.Po
include ./$(DEPDIR)/hello-ossPrimitiveFileOp.Po
include ./$(DEPDIR)/hello-pd.Po
include ./$(DEPDIR)/hello-pmdHello.Po

.cpp.o:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

edb-edb.o: client/edb.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -MT edb-edb.o -MD -MP -MF "$(DEPDIR)/edb-edb.Tpo" -c -o edb-edb.o `test -f 'client/edb.cpp' || echo '$(srcdir)/'`client/edb.cpp; \
	then mv -f "$(DEPDIR)/edb-edb.Tpo" "$(DEPDIR)/edb-edb.Po"; else rm -f "$(DEPDIR)/edb-edb.Tpo"; exit 1; fi
#	source='client/edb.cpp' object='edb-edb.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -c -o edb-edb.o `test -f 'client/edb.cpp' || echo '$(srcdir)/'`client/edb.cpp

edb-edb.obj: client/edb.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -MT edb-edb.obj -MD -MP -MF "$(DEPDIR)/edb-edb.Tpo" -c -o edb-edb.obj `if test -f 'client/edb.cpp'; then $(CYGPATH_W) 'client/edb.cpp'; else $(CYGPATH_W) '$(srcdir)/client/edb.cpp'; fi`; \
	then mv -f "$(DEPDIR)/edb-edb.Tpo" "$(DEPDIR)/edb-edb.Po"; else rm -f "$(DEPDIR)/edb-edb.Tpo"; exit 1; fi
#	source='client/edb.cpp' object='edb-edb.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -c -o edb-edb.obj `if test -f 'client/edb.cpp'; then $(CYGPATH_W) 'client/edb.cpp'; else $(CYGPATH_W) '$(srcdir)/client/edb.cpp'; fi`

edb-command.o: client/command.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -MT edb-command.o -MD -MP -MF "$(DEPDIR)/edb-command.Tpo" -c -o edb-command.o `test -f 'client/command.cpp' || echo '$(srcdir)/'`client/command.cpp; \
	then mv -f "$(DEPDIR)/edb-command.Tpo" "$(DEPDIR)/edb-command.Po"; else rm -f "$(DEPDIR)/edb-command.Tpo"; exit 1; fi
#	source='client/command.cpp' object='edb-command.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -c -o edb-command.o `test -f 'client/command.cpp' || echo '$(srcdir)/'`client/command.cpp

edb-command.obj: client/command.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -MT edb-command.obj -MD -MP -MF "$(DEPDIR)/edb-command.Tpo" -c -o edb-command.obj `if test -f 'client/command.cpp'; then $(CYGPATH_W) 'client/command.cpp'; else $(CYGPATH_W) '$(srcdir)/client/command.cpp'; fi`; \
	then mv -f "$(DEPDIR)/edb-command.Tpo" "$(DEPDIR)/edb-command.Po"; else rm -f "$(DEPDIR)/edb-command.Tpo"; exit 1; fi
#	source='client/command.cpp' object='edb-command.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -c -o edb-command.obj `if test -f 'client/command.cpp'; then $(CYGPATH_W) 'client/command.cpp'; else $(CYGPATH_W) '$(srcdir)/client/command.cpp'; fi`

edb-commandFactory.o: client/commandFactory.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -MT edb-commandFactory.o -MD -MP -MF "$(DEPDIR)/edb-commandFactory.Tpo" -c -o edb-commandFactory.o `test -f 'client/commandFactory.cpp' || echo '$(srcdir)/'`client/commandFactory.cpp; \
	then mv -f "$(DEPDIR)/edb-commandFactory.Tpo" "$(DEPDIR)/edb-commandFactory.Po"; else rm -f "$(DEPDIR)/edb-commandFactory.Tpo"; exit 1; fi
#	source='client/commandFactory.cpp' object='edb-commandFactory.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -c -o edb-commandFactory.o `test -f 'client/commandFactory.cpp' || echo '$(srcdir)/'`client/commandFactory.cpp

edb-commandFactory.obj: client/commandFactory.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -MT edb-commandFactory.obj -MD -MP -MF "$(DEPDIR)/edb-commandFactory.Tpo" -c -o edb-commandFactory.obj `if test -f 'client/commandFactory.cpp'; then $(CYGPATH_W) 'client/commandFactory.cpp'; else $(CYGPATH_W) '$(srcdir)/client/commandFactory.cpp'; fi`; \
	then mv -f "$(DEPDIR)/edb-commandFactory.Tpo" "$(DEPDIR)/edb-commandFactory.Po"; else rm -f "$(DEPDIR)/edb-commandFactory.Tpo"; exit 1; fi
#	source='client/commandFactory.cpp' object='edb-commandFactory.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -c -o edb-commandFactory.obj `if test -f 'client/commandFactory.cpp'; then $(CYGPATH_W) 'client/commandFactory.cpp'; else $(CYGPATH_W) '$(srcdir)/client/commandFactory.cpp'; fi`

edb-bsonobj.o: bson/src/bsonobj.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -MT edb-bsonobj.o -MD -MP -MF "$(DEPDIR)/edb-bsonobj.Tpo" -c -o edb-bsonobj.o `test -f 'bson/src/bsonobj.cpp' || echo '$(srcdir)/'`bson/src/bsonobj.cpp; \
	then mv -f "$(DEPDIR)/edb-bsonobj.Tpo" "$(DEPDIR)/edb-bsonobj.Po"; else rm -f "$(DEPDIR)/edb-bsonobj.Tpo"; exit 1; fi
#	source='bson/src/bsonobj.cpp' object='edb-bsonobj.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -c -o edb-bsonobj.o `test -f 'bson/src/bsonobj.cpp' || echo '$(srcdir)/'`bson/src/bsonobj.cpp

edb-bsonobj.obj: bson/src/bsonobj.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -MT edb-bsonobj.obj -MD -MP -MF "$(DEPDIR)/edb-bsonobj.Tpo" -c -o edb-bsonobj.obj `if test -f 'bson/src/bsonobj.cpp'; then $(CYGPATH_W) 'bson/src/bsonobj.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/bsonobj.cpp'; fi`; \
	then mv -f "$(DEPDIR)/edb-bsonobj.Tpo" "$(DEPDIR)/edb-bsonobj.Po"; else rm -f "$(DEPDIR)/edb-bsonobj.Tpo"; exit 1; fi
#	source='bson/src/bsonobj.cpp' object='edb-bsonobj.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -c -o edb-bsonobj.obj `if test -f 'bson/src/bsonobj.cpp'; then $(CYGPATH_W) 'bson/src/bsonobj.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/bsonobj.cpp'; fi`

edb-json.o: bson/src/util/json.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -MT edb-json.o -MD -MP -MF "$(DEPDIR)/edb-json.Tpo" -c -o edb-json.o `test -f 'bson/src/util/json.cpp' || echo '$(srcdir)/'`bson/src/util/json.cpp; \
	then mv -f "$(DEPDIR)/edb-json.Tpo" "$(DEPDIR)/edb-json.Po"; else rm -f "$(DEPDIR)/edb-json.Tpo"; exit 1; fi
#	source='bson/src/util/json.cpp' object='edb-json.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -c -o edb-json.o `test -f 'bson/src/util/json.cpp' || echo '$(srcdir)/'`bson/src/util/json.cpp

edb-json.obj: bson/src/util/json.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -MT edb-json.obj -MD -MP -MF "$(DEPDIR)/edb-json.Tpo" -c -o edb-json.obj `if test -f 'bson/src/util/json.cpp'; then $(CYGPATH_W) 'bson/src/util/json.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/util/json.cpp'; fi`; \
	then mv -f "$(DEPDIR)/edb-json.Tpo" "$(DEPDIR)/edb-json.Po"; else rm -f "$(DEPDIR)/edb-json.Tpo"; exit 1; fi
#	source='bson/src/util/json.cpp' object='edb-json.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -c -o edb-json.obj `if test -f 'bson/src/util/json.cpp'; then $(CYGPATH_W) 'bson/src/util/json.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/util/json.cpp'; fi`

edb-oid.o: bson/src/oid.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -MT edb-oid.o -MD -MP -MF "$(DEPDIR)/edb-oid.Tpo" -c -o edb-oid.o `test -f 'bson/src/oid.cpp' || echo '$(srcdir)/'`bson/src/oid.cpp; \
	then mv -f "$(DEPDIR)/edb-oid.Tpo" "$(DEPDIR)/edb-oid.Po"; else rm -f "$(DEPDIR)/edb-oid.Tpo"; exit 1; fi
#	source='bson/src/oid.cpp' object='edb-oid.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -c -o edb-oid.o `test -f 'bson/src/oid.cpp' || echo '$(srcdir)/'`bson/src/oid.cpp

edb-oid.obj: bson/src/oid.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -MT edb-oid.obj -MD -MP -MF "$(DEPDIR)/edb-oid.Tpo" -c -o edb-oid.obj `if test -f 'bson/src/oid.cpp'; then $(CYGPATH_W) 'bson/src/oid.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/oid.cpp'; fi`; \
	then mv -f "$(DEPDIR)/edb-oid.Tpo" "$(DEPDIR)/edb-oid.Po"; else rm -f "$(DEPDIR)/edb-oid.Tpo"; exit 1; fi
#	source='bson/src/oid.cpp' object='edb-oid.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -c -o edb-oid.obj `if test -f 'bson/src/oid.cpp'; then $(CYGPATH_W) 'bson/src/oid.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/oid.cpp'; fi`

edb-base64.o: bson/src/lib/base64.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -MT edb-base64.o -MD -MP -MF "$(DEPDIR)/edb-base64.Tpo" -c -o edb-base64.o `test -f 'bson/src/lib/base64.cpp' || echo '$(srcdir)/'`bson/src/lib/base64.cpp; \
	then mv -f "$(DEPDIR)/edb-base64.Tpo" "$(DEPDIR)/edb-base64.Po"; else rm -f "$(DEPDIR)/edb-base64.Tpo"; exit 1; fi
#	source='bson/src/lib/base64.cpp' object='edb-base64.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -c -o edb-base64.o `test -f 'bson/src/lib/base64.cpp' || echo '$(srcdir)/'`bson/src/lib/base64.cpp

edb-base64.obj: bson/src/lib/base64.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -MT edb-base64.obj -MD -MP -MF "$(DEPDIR)/edb-base64.Tpo" -c -o edb-base64.obj `if test -f 'bson/src/lib/base64.cpp'; then $(CYGPATH_W) 'bson/src/lib/base64.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/lib/base64.cpp'; fi`; \
	then mv -f "$(DEPDIR)/edb-base64.Tpo" "$(DEPDIR)/edb-base64.Po"; else rm -f "$(DEPDIR)/edb-base64.Tpo"; exit 1; fi
#	source='bson/src/lib/base64.cpp' object='edb-base64.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -c -o edb-base64.obj `if test -f 'bson/src/lib/base64.cpp'; then $(CYGPATH_W) 'bson/src/lib/base64.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/lib/base64.cpp'; fi`

edb-md5.o: bson/src/lib/md5.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -MT edb-md5.o -MD -MP -MF "$(DEPDIR)/edb-md5.Tpo" -c -o edb-md5.o `test -f 'bson/src/lib/md5.cpp' || echo '$(srcdir)/'`bson/src/lib/md5.cpp; \
	then mv -f "$(DEPDIR)/edb-md5.Tpo" "$(DEPDIR)/edb-md5.Po"; else rm -f "$(DEPDIR)/edb-md5.Tpo"; exit 1; fi
#	source='bson/src/lib/md5.cpp' object='edb-md5.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -c -o edb-md5.o `test -f 'bson/src/lib/md5.cpp' || echo '$(srcdir)/'`bson/src/lib/md5.cpp

edb-md5.obj: bson/src/lib/md5.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -MT edb-md5.obj -MD -MP -MF "$(DEPDIR)/edb-md5.Tpo" -c -o edb-md5.obj `if test -f 'bson/src/lib/md5.cpp'; then $(CYGPATH_W) 'bson/src/lib/md5.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/lib/md5.cpp'; fi`; \
	then mv -f "$(DEPDIR)/edb-md5.Tpo" "$(DEPDIR)/edb-md5.Po"; else rm -f "$(DEPDIR)/edb-md5.Tpo"; exit 1; fi
#	source='bson/src/lib/md5.cpp' object='edb-md5.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -c -o edb-md5.obj `if test -f 'bson/src/lib/md5.cpp'; then $(CYGPATH_W) 'bson/src/lib/md5.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/lib/md5.cpp'; fi`

edb-nonce.o: bson/src/lib/nonce.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -MT edb-nonce.o -MD -MP -MF "$(DEPDIR)/edb-nonce.Tpo" -c -o edb-nonce.o `test -f 'bson/src/lib/nonce.cpp' || echo '$(srcdir)/'`bson/src/lib/nonce.cpp; \
	then mv -f "$(DEPDIR)/edb-nonce.Tpo" "$(DEPDIR)/edb-nonce.Po"; else rm -f "$(DEPDIR)/edb-nonce.Tpo"; exit 1; fi
#	source='bson/src/lib/nonce.cpp' object='edb-nonce.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -c -o edb-nonce.o `test -f 'bson/src/lib/nonce.cpp' || echo '$(srcdir)/'`bson/src/lib/nonce.cpp

edb-nonce.obj: bson/src/lib/nonce.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -MT edb-nonce.obj -MD -MP -MF "$(DEPDIR)/edb-nonce.Tpo" -c -o edb-nonce.obj `if test -f 'bson/src/lib/nonce.cpp'; then $(CYGPATH_W) 'bson/src/lib/nonce.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/lib/nonce.cpp'; fi`; \
	then mv -f "$(DEPDIR)/edb-nonce.Tpo" "$(DEPDIR)/edb-nonce.Po"; else rm -f "$(DEPDIR)/edb-nonce.Tpo"; exit 1; fi
#	source='bson/src/lib/nonce.cpp' object='edb-nonce.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -c -o edb-nonce.obj `if test -f 'bson/src/lib/nonce.cpp'; then $(CYGPATH_W) 'bson/src/lib/nonce.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/lib/nonce.cpp'; fi`

edb-ossSocket.o: oss/ossSocket.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -MT edb-ossSocket.o -MD -MP -MF "$(DEPDIR)/edb-ossSocket.Tpo" -c -o edb-ossSocket.o `test -f 'oss/ossSocket.cpp' || echo '$(srcdir)/'`oss/ossSocket.cpp; \
	then mv -f "$(DEPDIR)/edb-ossSocket.Tpo" "$(DEPDIR)/edb-ossSocket.Po"; else rm -f "$(DEPDIR)/edb-ossSocket.Tpo"; exit 1; fi
#	source='oss/ossSocket.cpp' object='edb-ossSocket.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -c -o edb-ossSocket.o `test -f 'oss/ossSocket.cpp' || echo '$(srcdir)/'`oss/ossSocket.cpp

edb-ossSocket.obj: oss/ossSocket.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -MT edb-ossSocket.obj -MD -MP -MF "$(DEPDIR)/edb-ossSocket.Tpo" -c -o edb-ossSocket.obj `if test -f 'oss/ossSocket.cpp'; then $(CYGPATH_W) 'oss/ossSocket.cpp'; else $(CYGPATH_W) '$(srcdir)/oss/ossSocket.cpp'; fi`; \
	then mv -f "$(DEPDIR)/edb-ossSocket.Tpo" "$(DEPDIR)/edb-ossSocket.Po"; else rm -f "$(DEPDIR)/edb-ossSocket.Tpo"; exit 1; fi
#	source='oss/ossSocket.cpp' object='edb-ossSocket.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -c -o edb-ossSocket.obj `if test -f 'oss/ossSocket.cpp'; then $(CYGPATH_W) 'oss/ossSocket.cpp'; else $(CYGPATH_W) '$(srcdir)/oss/ossSocket.cpp'; fi`

edb-ossPrimitiveFileOp.o: oss/ossPrimitiveFileOp.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -MT edb-ossPrimitiveFileOp.o -MD -MP -MF "$(DEPDIR)/edb-ossPrimitiveFileOp.Tpo" -c -o edb-ossPrimitiveFileOp.o `test -f 'oss/ossPrimitiveFileOp.cpp' || echo '$(srcdir)/'`oss/ossPrimitiveFileOp.cpp; \
	then mv -f "$(DEPDIR)/edb-ossPrimitiveFileOp.Tpo" "$(DEPDIR)/edb-ossPrimitiveFileOp.Po"; else rm -f "$(DEPDIR)/edb-ossPrimitiveFileOp.Tpo"; exit 1; fi
#	source='oss/ossPrimitiveFileOp.cpp' object='edb-ossPrimitiveFileOp.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -c -o edb-ossPrimitiveFileOp.o `test -f 'oss/ossPrimitiveFileOp.cpp' || echo '$(srcdir)/'`oss/ossPrimitiveFileOp.cpp

edb-ossPrimitiveFileOp.obj: oss/ossPrimitiveFileOp.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -MT edb-ossPrimitiveFileOp.obj -MD -MP -MF "$(DEPDIR)/edb-ossPrimitiveFileOp.Tpo" -c -o edb-ossPrimitiveFileOp.obj `if test -f 'oss/ossPrimitiveFileOp.cpp'; then $(CYGPATH_W) 'oss/ossPrimitiveFileOp.cpp'; else $(CYGPATH_W) '$(srcdir)/oss/ossPrimitiveFileOp.cpp'; fi`; \
	then mv -f "$(DEPDIR)/edb-ossPrimitiveFileOp.Tpo" "$(DEPDIR)/edb-ossPrimitiveFileOp.Po"; else rm -f "$(DEPDIR)/edb-ossPrimitiveFileOp.Tpo"; exit 1; fi
#	source='oss/ossPrimitiveFileOp.cpp' object='edb-ossPrimitiveFileOp.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -c -o edb-ossPrimitiveFileOp.obj `if test -f 'oss/ossPrimitiveFileOp.cpp'; then $(CYGPATH_W) 'oss/ossPrimitiveFileOp.cpp'; else $(CYGPATH_W) '$(srcdir)/oss/ossPrimitiveFileOp.cpp'; fi`

edb-msg.o: msg/msg.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -MT edb-msg.o -MD -MP -MF "$(DEPDIR)/edb-msg.Tpo" -c -o edb-msg.o `test -f 'msg/msg.cpp' || echo '$(srcdir)/'`msg/msg.cpp; \
	then mv -f "$(DEPDIR)/edb-msg.Tpo" "$(DEPDIR)/edb-msg.Po"; else rm -f "$(DEPDIR)/edb-msg.Tpo"; exit 1; fi
#	source='msg/msg.cpp' object='edb-msg.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -c -o edb-msg.o `test -f 'msg/msg.cpp' || echo '$(srcdir)/'`msg/msg.cpp

edb-msg.obj: msg/msg.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -MT edb-msg.obj -MD -MP -MF "$(DEPDIR)/edb-msg.Tpo" -c -o edb-msg.obj `if test -f 'msg/msg.cpp'; then $(CYGPATH_W) 'msg/msg.cpp'; else $(CYGPATH_W) '$(srcdir)/msg/msg.cpp'; fi`; \
	then mv -f "$(DEPDIR)/edb-msg.Tpo" "$(DEPDIR)/edb-msg.Po"; else rm -f "$(DEPDIR)/edb-msg.Tpo"; exit 1; fi
#	source='msg/msg.cpp' object='edb-msg.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -c -o edb-msg.obj `if test -f 'msg/msg.cpp'; then $(CYGPATH_W) 'msg/msg.cpp'; else $(CYGPATH_W) '$(srcdir)/msg/msg.cpp'; fi`

edb-pd.o: pd/pd.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -MT edb-pd.o -MD -MP -MF "$(DEPDIR)/edb-pd.Tpo" -c -o edb-pd.o `test -f 'pd/pd.cpp' || echo '$(srcdir)/'`pd/pd.cpp; \
	then mv -f "$(DEPDIR)/edb-pd.Tpo" "$(DEPDIR)/edb-pd.Po"; else rm -f "$(DEPDIR)/edb-pd.Tpo"; exit 1; fi
#	source='pd/pd.cpp' object='edb-pd.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -c -o edb-pd.o `test -f 'pd/pd.cpp' || echo '$(srcdir)/'`pd/pd.cpp

edb-pd.obj: pd/pd.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -MT edb-pd.obj -MD -MP -MF "$(DEPDIR)/edb-pd.Tpo" -c -o edb-pd.obj `if test -f 'pd/pd.cpp'; then $(CYGPATH_W) 'pd/pd.cpp'; else $(CYGPATH_W) '$(srcdir)/pd/pd.cpp'; fi`; \
	then mv -f "$(DEPDIR)/edb-pd.Tpo" "$(DEPDIR)/edb-pd.Po"; else rm -f "$(DEPDIR)/edb-pd.Tpo"; exit 1; fi
#	source='pd/pd.cpp' object='edb-pd.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edb_CXXFLAGS) $(CXXFLAGS) -c -o edb-pd.obj `if test -f 'pd/pd.cpp'; then $(CYGPATH_W) 'pd/pd.cpp'; else $(CYGPATH_W) '$(srcdir)/pd/pd.cpp'; fi`

emeralddb-ossSocket.o: oss/ossSocket.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -MT emeralddb-ossSocket.o -MD -MP -MF "$(DEPDIR)/emeralddb-ossSocket.Tpo" -c -o emeralddb-ossSocket.o `test -f 'oss/ossSocket.cpp' || echo '$(srcdir)/'`oss/ossSocket.cpp; \
	then mv -f "$(DEPDIR)/emeralddb-ossSocket.Tpo" "$(DEPDIR)/emeralddb-ossSocket.Po"; else rm -f "$(DEPDIR)/emeralddb-ossSocket.Tpo"; exit 1; fi
#	source='oss/ossSocket.cpp' object='emeralddb-ossSocket.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -c -o emeralddb-ossSocket.o `test -f 'oss/ossSocket.cpp' || echo '$(srcdir)/'`oss/ossSocket.cpp

emeralddb-ossSocket.obj: oss/ossSocket.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -MT emeralddb-ossSocket.obj -MD -MP -MF "$(DEPDIR)/emeralddb-ossSocket.Tpo" -c -o emeralddb-ossSocket.obj `if test -f 'oss/ossSocket.cpp'; then $(CYGPATH_W) 'oss/ossSocket.cpp'; else $(CYGPATH_W) '$(srcdir)/oss/ossSocket.cpp'; fi`; \
	then mv -f "$(DEPDIR)/emeralddb-ossSocket.Tpo" "$(DEPDIR)/emeralddb-ossSocket.Po"; else rm -f "$(DEPDIR)/emeralddb-ossSocket.Tpo"; exit 1; fi
#	source='oss/ossSocket.cpp' object='emeralddb-ossSocket.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -c -o emeralddb-ossSocket.obj `if test -f 'oss/ossSocket.cpp'; then $(CYGPATH_W) 'oss/ossSocket.cpp'; else $(CYGPATH_W) '$(srcdir)/oss/ossSocket.cpp'; fi`

emeralddb-ossPrimitiveFileOp.o: oss/ossPrimitiveFileOp.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -MT emeralddb-ossPrimitiveFileOp.o -MD -MP -MF "$(DEPDIR)/emeralddb-ossPrimitiveFileOp.Tpo" -c -o emeralddb-ossPrimitiveFileOp.o `test -f 'oss/ossPrimitiveFileOp.cpp' || echo '$(srcdir)/'`oss/ossPrimitiveFileOp.cpp; \
	then mv -f "$(DEPDIR)/emeralddb-ossPrimitiveFileOp.Tpo" "$(DEPDIR)/emeralddb-ossPrimitiveFileOp.Po"; else rm -f "$(DEPDIR)/emeralddb-ossPrimitiveFileOp.Tpo"; exit 1; fi
#	source='oss/ossPrimitiveFileOp.cpp' object='emeralddb-ossPrimitiveFileOp.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -c -o emeralddb-ossPrimitiveFileOp.o `test -f 'oss/ossPrimitiveFileOp.cpp' || echo '$(srcdir)/'`oss/ossPrimitiveFileOp.cpp

emeralddb-ossPrimitiveFileOp.obj: oss/ossPrimitiveFileOp.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -MT emeralddb-ossPrimitiveFileOp.obj -MD -MP -MF "$(DEPDIR)/emeralddb-ossPrimitiveFileOp.Tpo" -c -o emeralddb-ossPrimitiveFileOp.obj `if test -f 'oss/ossPrimitiveFileOp.cpp'; then $(CYGPATH_W) 'oss/ossPrimitiveFileOp.cpp'; else $(CYGPATH_W) '$(srcdir)/oss/ossPrimitiveFileOp.cpp'; fi`; \
	then mv -f "$(DEPDIR)/emeralddb-ossPrimitiveFileOp.Tpo" "$(DEPDIR)/emeralddb-ossPrimitiveFileOp.Po"; else rm -f "$(DEPDIR)/emeralddb-ossPrimitiveFileOp.Tpo"; exit 1; fi
#	source='oss/ossPrimitiveFileOp.cpp' object='emeralddb-ossPrimitiveFileOp.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -c -o emeralddb-ossPrimitiveFileOp.obj `if test -f 'oss/ossPrimitiveFileOp.cpp'; then $(CYGPATH_W) 'oss/ossPrimitiveFileOp.cpp'; else $(CYGPATH_W) '$(srcdir)/oss/ossPrimitiveFileOp.cpp'; fi`

emeralddb-pmdEDU.o: pmd/pmdEDU.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -MT emeralddb-pmdEDU.o -MD -MP -MF "$(DEPDIR)/emeralddb-pmdEDU.Tpo" -c -o emeralddb-pmdEDU.o `test -f 'pmd/pmdEDU.cpp' || echo '$(srcdir)/'`pmd/pmdEDU.cpp; \
	then mv -f "$(DEPDIR)/emeralddb-pmdEDU.Tpo" "$(DEPDIR)/emeralddb-pmdEDU.Po"; else rm -f "$(DEPDIR)/emeralddb-pmdEDU.Tpo"; exit 1; fi
#	source='pmd/pmdEDU.cpp' object='emeralddb-pmdEDU.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -c -o emeralddb-pmdEDU.o `test -f 'pmd/pmdEDU.cpp' || echo '$(srcdir)/'`pmd/pmdEDU.cpp

emeralddb-pmdEDU.obj: pmd/pmdEDU.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -MT emeralddb-pmdEDU.obj -MD -MP -MF "$(DEPDIR)/emeralddb-pmdEDU.Tpo" -c -o emeralddb-pmdEDU.obj `if test -f 'pmd/pmdEDU.cpp'; then $(CYGPATH_W) 'pmd/pmdEDU.cpp'; else $(CYGPATH_W) '$(srcdir)/pmd/pmdEDU.cpp'; fi`; \
	then mv -f "$(DEPDIR)/emeralddb-pmdEDU.Tpo" "$(DEPDIR)/emeralddb-pmdEDU.Po"; else rm -f "$(DEPDIR)/emeralddb-pmdEDU.Tpo"; exit 1; fi
#	source='pmd/pmdEDU.cpp' object='emeralddb-pmdEDU.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -c -o emeralddb-pmdEDU.obj `if test -f 'pmd/pmdEDU.cpp'; then $(CYGPATH_W) 'pmd/pmdEDU.cpp'; else $(CYGPATH_W) '$(srcdir)/pmd/pmdEDU.cpp'; fi`

emeralddb-pmdEDUMgr.o: pmd/pmdEDUMgr.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -MT emeralddb-pmdEDUMgr.o -MD -MP -MF "$(DEPDIR)/emeralddb-pmdEDUMgr.Tpo" -c -o emeralddb-pmdEDUMgr.o `test -f 'pmd/pmdEDUMgr.cpp' || echo '$(srcdir)/'`pmd/pmdEDUMgr.cpp; \
	then mv -f "$(DEPDIR)/emeralddb-pmdEDUMgr.Tpo" "$(DEPDIR)/emeralddb-pmdEDUMgr.Po"; else rm -f "$(DEPDIR)/emeralddb-pmdEDUMgr.Tpo"; exit 1; fi
#	source='pmd/pmdEDUMgr.cpp' object='emeralddb-pmdEDUMgr.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -c -o emeralddb-pmdEDUMgr.o `test -f 'pmd/pmdEDUMgr.cpp' || echo '$(srcdir)/'`pmd/pmdEDUMgr.cpp

emeralddb-pmdEDUMgr.obj: pmd/pmdEDUMgr.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -MT emeralddb-pmdEDUMgr.obj -MD -MP -MF "$(DEPDIR)/emeralddb-pmdEDUMgr.Tpo" -c -o emeralddb-pmdEDUMgr.obj `if test -f 'pmd/pmdEDUMgr.cpp'; then $(CYGPATH_W) 'pmd/pmdEDUMgr.cpp'; else $(CYGPATH_W) '$(srcdir)/pmd/pmdEDUMgr.cpp'; fi`; \
	then mv -f "$(DEPDIR)/emeralddb-pmdEDUMgr.Tpo" "$(DEPDIR)/emeralddb-pmdEDUMgr.Po"; else rm -f "$(DEPDIR)/emeralddb-pmdEDUMgr.Tpo"; exit 1; fi
#	source='pmd/pmdEDUMgr.cpp' object='emeralddb-pmdEDUMgr.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -c -o emeralddb-pmdEDUMgr.obj `if test -f 'pmd/pmdEDUMgr.cpp'; then $(CYGPATH_W) 'pmd/pmdEDUMgr.cpp'; else $(CYGPATH_W) '$(srcdir)/pmd/pmdEDUMgr.cpp'; fi`

emeralddb-pmdAgent.o: pmd/pmdAgent.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -MT emeralddb-pmdAgent.o -MD -MP -MF "$(DEPDIR)/emeralddb-pmdAgent.Tpo" -c -o emeralddb-pmdAgent.o `test -f 'pmd/pmdAgent.cpp' || echo '$(srcdir)/'`pmd/pmdAgent.cpp; \
	then mv -f "$(DEPDIR)/emeralddb-pmdAgent.Tpo" "$(DEPDIR)/emeralddb-pmdAgent.Po"; else rm -f "$(DEPDIR)/emeralddb-pmdAgent.Tpo"; exit 1; fi
#	source='pmd/pmdAgent.cpp' object='emeralddb-pmdAgent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -c -o emeralddb-pmdAgent.o `test -f 'pmd/pmdAgent.cpp' || echo '$(srcdir)/'`pmd/pmdAgent.cpp

emeralddb-pmdAgent.obj: pmd/pmdAgent.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -MT emeralddb-pmdAgent.obj -MD -MP -MF "$(DEPDIR)/emeralddb-pmdAgent.Tpo" -c -o emeralddb-pmdAgent.obj `if test -f 'pmd/pmdAgent.cpp'; then $(CYGPATH_W) 'pmd/pmdAgent.cpp'; else $(CYGPATH_W) '$(srcdir)/pmd/pmdAgent.cpp'; fi`; \
	then mv -f "$(DEPDIR)/emeralddb-pmdAgent.Tpo" "$(DEPDIR)/emeralddb-pmdAgent.Po"; else rm -f "$(DEPDIR)/emeralddb-pmdAgent.Tpo"; exit 1; fi
#	source='pmd/pmdAgent.cpp' object='emeralddb-pmdAgent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -c -o emeralddb-pmdAgent.obj `if test -f 'pmd/pmdAgent.cpp'; then $(CYGPATH_W) 'pmd/pmdAgent.cpp'; else $(CYGPATH_W) '$(srcdir)/pmd/pmdAgent.cpp'; fi`

emeralddb-pmdTcpListener.o: pmd/pmdTcpListener.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -MT emeralddb-pmdTcpListener.o -MD -MP -MF "$(DEPDIR)/emeralddb-pmdTcpListener.Tpo" -c -o emeralddb-pmdTcpListener.o `test -f 'pmd/pmdTcpListener.cpp' || echo '$(srcdir)/'`pmd/pmdTcpListener.cpp; \
	then mv -f "$(DEPDIR)/emeralddb-pmdTcpListener.Tpo" "$(DEPDIR)/emeralddb-pmdTcpListener.Po"; else rm -f "$(DEPDIR)/emeralddb-pmdTcpListener.Tpo"; exit 1; fi
#	source='pmd/pmdTcpListener.cpp' object='emeralddb-pmdTcpListener.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -c -o emeralddb-pmdTcpListener.o `test -f 'pmd/pmdTcpListener.cpp' || echo '$(srcdir)/'`pmd/pmdTcpListener.cpp

emeralddb-pmdTcpListener.obj: pmd/pmdTcpListener.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -MT emeralddb-pmdTcpListener.obj -MD -MP -MF "$(DEPDIR)/emeralddb-pmdTcpListener.Tpo" -c -o emeralddb-pmdTcpListener.obj `if test -f 'pmd/pmdTcpListener.cpp'; then $(CYGPATH_W) 'pmd/pmdTcpListener.cpp'; else $(CYGPATH_W) '$(srcdir)/pmd/pmdTcpListener.cpp'; fi`; \
	then mv -f "$(DEPDIR)/emeralddb-pmdTcpListener.Tpo" "$(DEPDIR)/emeralddb-pmdTcpListener.Po"; else rm -f "$(DEPDIR)/emeralddb-pmdTcpListener.Tpo"; exit 1; fi
#	source='pmd/pmdTcpListener.cpp' object='emeralddb-pmdTcpListener.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -c -o emeralddb-pmdTcpListener.obj `if test -f 'pmd/pmdTcpListener.cpp'; then $(CYGPATH_W) 'pmd/pmdTcpListener.cpp'; else $(CYGPATH_W) '$(srcdir)/pmd/pmdTcpListener.cpp'; fi`

emeralddb-bsonobj.o: bson/src/bsonobj.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -MT emeralddb-bsonobj.o -MD -MP -MF "$(DEPDIR)/emeralddb-bsonobj.Tpo" -c -o emeralddb-bsonobj.o `test -f 'bson/src/bsonobj.cpp' || echo '$(srcdir)/'`bson/src/bsonobj.cpp; \
	then mv -f "$(DEPDIR)/emeralddb-bsonobj.Tpo" "$(DEPDIR)/emeralddb-bsonobj.Po"; else rm -f "$(DEPDIR)/emeralddb-bsonobj.Tpo"; exit 1; fi
#	source='bson/src/bsonobj.cpp' object='emeralddb-bsonobj.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -c -o emeralddb-bsonobj.o `test -f 'bson/src/bsonobj.cpp' || echo '$(srcdir)/'`bson/src/bsonobj.cpp

emeralddb-bsonobj.obj: bson/src/bsonobj.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -MT emeralddb-bsonobj.obj -MD -MP -MF "$(DEPDIR)/emeralddb-bsonobj.Tpo" -c -o emeralddb-bsonobj.obj `if test -f 'bson/src/bsonobj.cpp'; then $(CYGPATH_W) 'bson/src/bsonobj.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/bsonobj.cpp'; fi`; \
	then mv -f "$(DEPDIR)/emeralddb-bsonobj.Tpo" "$(DEPDIR)/emeralddb-bsonobj.Po"; else rm -f "$(DEPDIR)/emeralddb-bsonobj.Tpo"; exit 1; fi
#	source='bson/src/bsonobj.cpp' object='emeralddb-bsonobj.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -c -o emeralddb-bsonobj.obj `if test -f 'bson/src/bsonobj.cpp'; then $(CYGPATH_W) 'bson/src/bsonobj.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/bsonobj.cpp'; fi`

emeralddb-json.o: bson/src/util/json.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -MT emeralddb-json.o -MD -MP -MF "$(DEPDIR)/emeralddb-json.Tpo" -c -o emeralddb-json.o `test -f 'bson/src/util/json.cpp' || echo '$(srcdir)/'`bson/src/util/json.cpp; \
	then mv -f "$(DEPDIR)/emeralddb-json.Tpo" "$(DEPDIR)/emeralddb-json.Po"; else rm -f "$(DEPDIR)/emeralddb-json.Tpo"; exit 1; fi
#	source='bson/src/util/json.cpp' object='emeralddb-json.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -c -o emeralddb-json.o `test -f 'bson/src/util/json.cpp' || echo '$(srcdir)/'`bson/src/util/json.cpp

emeralddb-json.obj: bson/src/util/json.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -MT emeralddb-json.obj -MD -MP -MF "$(DEPDIR)/emeralddb-json.Tpo" -c -o emeralddb-json.obj `if test -f 'bson/src/util/json.cpp'; then $(CYGPATH_W) 'bson/src/util/json.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/util/json.cpp'; fi`; \
	then mv -f "$(DEPDIR)/emeralddb-json.Tpo" "$(DEPDIR)/emeralddb-json.Po"; else rm -f "$(DEPDIR)/emeralddb-json.Tpo"; exit 1; fi
#	source='bson/src/util/json.cpp' object='emeralddb-json.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -c -o emeralddb-json.obj `if test -f 'bson/src/util/json.cpp'; then $(CYGPATH_W) 'bson/src/util/json.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/util/json.cpp'; fi`

emeralddb-oid.o: bson/src/oid.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -MT emeralddb-oid.o -MD -MP -MF "$(DEPDIR)/emeralddb-oid.Tpo" -c -o emeralddb-oid.o `test -f 'bson/src/oid.cpp' || echo '$(srcdir)/'`bson/src/oid.cpp; \
	then mv -f "$(DEPDIR)/emeralddb-oid.Tpo" "$(DEPDIR)/emeralddb-oid.Po"; else rm -f "$(DEPDIR)/emeralddb-oid.Tpo"; exit 1; fi
#	source='bson/src/oid.cpp' object='emeralddb-oid.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -c -o emeralddb-oid.o `test -f 'bson/src/oid.cpp' || echo '$(srcdir)/'`bson/src/oid.cpp

emeralddb-oid.obj: bson/src/oid.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -MT emeralddb-oid.obj -MD -MP -MF "$(DEPDIR)/emeralddb-oid.Tpo" -c -o emeralddb-oid.obj `if test -f 'bson/src/oid.cpp'; then $(CYGPATH_W) 'bson/src/oid.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/oid.cpp'; fi`; \
	then mv -f "$(DEPDIR)/emeralddb-oid.Tpo" "$(DEPDIR)/emeralddb-oid.Po"; else rm -f "$(DEPDIR)/emeralddb-oid.Tpo"; exit 1; fi
#	source='bson/src/oid.cpp' object='emeralddb-oid.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -c -o emeralddb-oid.obj `if test -f 'bson/src/oid.cpp'; then $(CYGPATH_W) 'bson/src/oid.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/oid.cpp'; fi`

emeralddb-base64.o: bson/src/lib/base64.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -MT emeralddb-base64.o -MD -MP -MF "$(DEPDIR)/emeralddb-base64.Tpo" -c -o emeralddb-base64.o `test -f 'bson/src/lib/base64.cpp' || echo '$(srcdir)/'`bson/src/lib/base64.cpp; \
	then mv -f "$(DEPDIR)/emeralddb-base64.Tpo" "$(DEPDIR)/emeralddb-base64.Po"; else rm -f "$(DEPDIR)/emeralddb-base64.Tpo"; exit 1; fi
#	source='bson/src/lib/base64.cpp' object='emeralddb-base64.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -c -o emeralddb-base64.o `test -f 'bson/src/lib/base64.cpp' || echo '$(srcdir)/'`bson/src/lib/base64.cpp

emeralddb-base64.obj: bson/src/lib/base64.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -MT emeralddb-base64.obj -MD -MP -MF "$(DEPDIR)/emeralddb-base64.Tpo" -c -o emeralddb-base64.obj `if test -f 'bson/src/lib/base64.cpp'; then $(CYGPATH_W) 'bson/src/lib/base64.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/lib/base64.cpp'; fi`; \
	then mv -f "$(DEPDIR)/emeralddb-base64.Tpo" "$(DEPDIR)/emeralddb-base64.Po"; else rm -f "$(DEPDIR)/emeralddb-base64.Tpo"; exit 1; fi
#	source='bson/src/lib/base64.cpp' object='emeralddb-base64.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -c -o emeralddb-base64.obj `if test -f 'bson/src/lib/base64.cpp'; then $(CYGPATH_W) 'bson/src/lib/base64.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/lib/base64.cpp'; fi`

emeralddb-md5.o: bson/src/lib/md5.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -MT emeralddb-md5.o -MD -MP -MF "$(DEPDIR)/emeralddb-md5.Tpo" -c -o emeralddb-md5.o `test -f 'bson/src/lib/md5.cpp' || echo '$(srcdir)/'`bson/src/lib/md5.cpp; \
	then mv -f "$(DEPDIR)/emeralddb-md5.Tpo" "$(DEPDIR)/emeralddb-md5.Po"; else rm -f "$(DEPDIR)/emeralddb-md5.Tpo"; exit 1; fi
#	source='bson/src/lib/md5.cpp' object='emeralddb-md5.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -c -o emeralddb-md5.o `test -f 'bson/src/lib/md5.cpp' || echo '$(srcdir)/'`bson/src/lib/md5.cpp

emeralddb-md5.obj: bson/src/lib/md5.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -MT emeralddb-md5.obj -MD -MP -MF "$(DEPDIR)/emeralddb-md5.Tpo" -c -o emeralddb-md5.obj `if test -f 'bson/src/lib/md5.cpp'; then $(CYGPATH_W) 'bson/src/lib/md5.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/lib/md5.cpp'; fi`; \
	then mv -f "$(DEPDIR)/emeralddb-md5.Tpo" "$(DEPDIR)/emeralddb-md5.Po"; else rm -f "$(DEPDIR)/emeralddb-md5.Tpo"; exit 1; fi
#	source='bson/src/lib/md5.cpp' object='emeralddb-md5.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -c -o emeralddb-md5.obj `if test -f 'bson/src/lib/md5.cpp'; then $(CYGPATH_W) 'bson/src/lib/md5.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/lib/md5.cpp'; fi`

emeralddb-nonce.o: bson/src/lib/nonce.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -MT emeralddb-nonce.o -MD -MP -MF "$(DEPDIR)/emeralddb-nonce.Tpo" -c -o emeralddb-nonce.o `test -f 'bson/src/lib/nonce.cpp' || echo '$(srcdir)/'`bson/src/lib/nonce.cpp; \
	then mv -f "$(DEPDIR)/emeralddb-nonce.Tpo" "$(DEPDIR)/emeralddb-nonce.Po"; else rm -f "$(DEPDIR)/emeralddb-nonce.Tpo"; exit 1; fi
#	source='bson/src/lib/nonce.cpp' object='emeralddb-nonce.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -c -o emeralddb-nonce.o `test -f 'bson/src/lib/nonce.cpp' || echo '$(srcdir)/'`bson/src/lib/nonce.cpp

emeralddb-nonce.obj: bson/src/lib/nonce.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -MT emeralddb-nonce.obj -MD -MP -MF "$(DEPDIR)/emeralddb-nonce.Tpo" -c -o emeralddb-nonce.obj `if test -f 'bson/src/lib/nonce.cpp'; then $(CYGPATH_W) 'bson/src/lib/nonce.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/lib/nonce.cpp'; fi`; \
	then mv -f "$(DEPDIR)/emeralddb-nonce.Tpo" "$(DEPDIR)/emeralddb-nonce.Po"; else rm -f "$(DEPDIR)/emeralddb-nonce.Tpo"; exit 1; fi
#	source='bson/src/lib/nonce.cpp' object='emeralddb-nonce.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -c -o emeralddb-nonce.obj `if test -f 'bson/src/lib/nonce.cpp'; then $(CYGPATH_W) 'bson/src/lib/nonce.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/lib/nonce.cpp'; fi`

emeralddb-msg.o: msg/msg.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -MT emeralddb-msg.o -MD -MP -MF "$(DEPDIR)/emeralddb-msg.Tpo" -c -o emeralddb-msg.o `test -f 'msg/msg.cpp' || echo '$(srcdir)/'`msg/msg.cpp; \
	then mv -f "$(DEPDIR)/emeralddb-msg.Tpo" "$(DEPDIR)/emeralddb-msg.Po"; else rm -f "$(DEPDIR)/emeralddb-msg.Tpo"; exit 1; fi
#	source='msg/msg.cpp' object='emeralddb-msg.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -c -o emeralddb-msg.o `test -f 'msg/msg.cpp' || echo '$(srcdir)/'`msg/msg.cpp

emeralddb-msg.obj: msg/msg.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -MT emeralddb-msg.obj -MD -MP -MF "$(DEPDIR)/emeralddb-msg.Tpo" -c -o emeralddb-msg.obj `if test -f 'msg/msg.cpp'; then $(CYGPATH_W) 'msg/msg.cpp'; else $(CYGPATH_W) '$(srcdir)/msg/msg.cpp'; fi`; \
	then mv -f "$(DEPDIR)/emeralddb-msg.Tpo" "$(DEPDIR)/emeralddb-msg.Po"; else rm -f "$(DEPDIR)/emeralddb-msg.Tpo"; exit 1; fi
#	source='msg/msg.cpp' object='emeralddb-msg.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -c -o emeralddb-msg.obj `if test -f 'msg/msg.cpp'; then $(CYGPATH_W) 'msg/msg.cpp'; else $(CYGPATH_W) '$(srcdir)/msg/msg.cpp'; fi`

emeralddb-pd.o: pd/pd.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -MT emeralddb-pd.o -MD -MP -MF "$(DEPDIR)/emeralddb-pd.Tpo" -c -o emeralddb-pd.o `test -f 'pd/pd.cpp' || echo '$(srcdir)/'`pd/pd.cpp; \
	then mv -f "$(DEPDIR)/emeralddb-pd.Tpo" "$(DEPDIR)/emeralddb-pd.Po"; else rm -f "$(DEPDIR)/emeralddb-pd.Tpo"; exit 1; fi
#	source='pd/pd.cpp' object='emeralddb-pd.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -c -o emeralddb-pd.o `test -f 'pd/pd.cpp' || echo '$(srcdir)/'`pd/pd.cpp

emeralddb-pd.obj: pd/pd.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -MT emeralddb-pd.obj -MD -MP -MF "$(DEPDIR)/emeralddb-pd.Tpo" -c -o emeralddb-pd.obj `if test -f 'pd/pd.cpp'; then $(CYGPATH_W) 'pd/pd.cpp'; else $(CYGPATH_W) '$(srcdir)/pd/pd.cpp'; fi`; \
	then mv -f "$(DEPDIR)/emeralddb-pd.Tpo" "$(DEPDIR)/emeralddb-pd.Po"; else rm -f "$(DEPDIR)/emeralddb-pd.Tpo"; exit 1; fi
#	source='pd/pd.cpp' object='emeralddb-pd.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -c -o emeralddb-pd.obj `if test -f 'pd/pd.cpp'; then $(CYGPATH_W) 'pd/pd.cpp'; else $(CYGPATH_W) '$(srcdir)/pd/pd.cpp'; fi`

emeralddb-pmdOptions.o: pmd/pmdOptions.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -MT emeralddb-pmdOptions.o -MD -MP -MF "$(DEPDIR)/emeralddb-pmdOptions.Tpo" -c -o emeralddb-pmdOptions.o `test -f 'pmd/pmdOptions.cpp' || echo '$(srcdir)/'`pmd/pmdOptions.cpp; \
	then mv -f "$(DEPDIR)/emeralddb-pmdOptions.Tpo" "$(DEPDIR)/emeralddb-pmdOptions.Po"; else rm -f "$(DEPDIR)/emeralddb-pmdOptions.Tpo"; exit 1; fi
#	source='pmd/pmdOptions.cpp' object='emeralddb-pmdOptions.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -c -o emeralddb-pmdOptions.o `test -f 'pmd/pmdOptions.cpp' || echo '$(srcdir)/'`pmd/pmdOptions.cpp

emeralddb-pmdOptions.obj: pmd/pmdOptions.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -MT emeralddb-pmdOptions.obj -MD -MP -MF "$(DEPDIR)/emeralddb-pmdOptions.Tpo" -c -o emeralddb-pmdOptions.obj `if test -f 'pmd/pmdOptions.cpp'; then $(CYGPATH_W) 'pmd/pmdOptions.cpp'; else $(CYGPATH_W) '$(srcdir)/pmd/pmdOptions.cpp'; fi`; \
	then mv -f "$(DEPDIR)/emeralddb-pmdOptions.Tpo" "$(DEPDIR)/emeralddb-pmdOptions.Po"; else rm -f "$(DEPDIR)/emeralddb-pmdOptions.Tpo"; exit 1; fi
#	source='pmd/pmdOptions.cpp' object='emeralddb-pmdOptions.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -c -o emeralddb-pmdOptions.obj `if test -f 'pmd/pmdOptions.cpp'; then $(CYGPATH_W) 'pmd/pmdOptions.cpp'; else $(CYGPATH_W) '$(srcdir)/pmd/pmdOptions.cpp'; fi`

emeralddb-pmd.o: pmd/pmd.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -MT emeralddb-pmd.o -MD -MP -MF "$(DEPDIR)/emeralddb-pmd.Tpo" -c -o emeralddb-pmd.o `test -f 'pmd/pmd.cpp' || echo '$(srcdir)/'`pmd/pmd.cpp; \
	then mv -f "$(DEPDIR)/emeralddb-pmd.Tpo" "$(DEPDIR)/emeralddb-pmd.Po"; else rm -f "$(DEPDIR)/emeralddb-pmd.Tpo"; exit 1; fi
#	source='pmd/pmd.cpp' object='emeralddb-pmd.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -c -o emeralddb-pmd.o `test -f 'pmd/pmd.cpp' || echo '$(srcdir)/'`pmd/pmd.cpp

emeralddb-pmd.obj: pmd/pmd.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -MT emeralddb-pmd.obj -MD -MP -MF "$(DEPDIR)/emeralddb-pmd.Tpo" -c -o emeralddb-pmd.obj `if test -f 'pmd/pmd.cpp'; then $(CYGPATH_W) 'pmd/pmd.cpp'; else $(CYGPATH_W) '$(srcdir)/pmd/pmd.cpp'; fi`; \
	then mv -f "$(DEPDIR)/emeralddb-pmd.Tpo" "$(DEPDIR)/emeralddb-pmd.Po"; else rm -f "$(DEPDIR)/emeralddb-pmd.Tpo"; exit 1; fi
#	source='pmd/pmd.cpp' object='emeralddb-pmd.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -c -o emeralddb-pmd.obj `if test -f 'pmd/pmd.cpp'; then $(CYGPATH_W) 'pmd/pmd.cpp'; else $(CYGPATH_W) '$(srcdir)/pmd/pmd.cpp'; fi`

emeralddb-pmdMain.o: pmd/pmdMain.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -MT emeralddb-pmdMain.o -MD -MP -MF "$(DEPDIR)/emeralddb-pmdMain.Tpo" -c -o emeralddb-pmdMain.o `test -f 'pmd/pmdMain.cpp' || echo '$(srcdir)/'`pmd/pmdMain.cpp; \
	then mv -f "$(DEPDIR)/emeralddb-pmdMain.Tpo" "$(DEPDIR)/emeralddb-pmdMain.Po"; else rm -f "$(DEPDIR)/emeralddb-pmdMain.Tpo"; exit 1; fi
#	source='pmd/pmdMain.cpp' object='emeralddb-pmdMain.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -c -o emeralddb-pmdMain.o `test -f 'pmd/pmdMain.cpp' || echo '$(srcdir)/'`pmd/pmdMain.cpp

emeralddb-pmdMain.obj: pmd/pmdMain.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -MT emeralddb-pmdMain.obj -MD -MP -MF "$(DEPDIR)/emeralddb-pmdMain.Tpo" -c -o emeralddb-pmdMain.obj `if test -f 'pmd/pmdMain.cpp'; then $(CYGPATH_W) 'pmd/pmdMain.cpp'; else $(CYGPATH_W) '$(srcdir)/pmd/pmdMain.cpp'; fi`; \
	then mv -f "$(DEPDIR)/emeralddb-pmdMain.Tpo" "$(DEPDIR)/emeralddb-pmdMain.Po"; else rm -f "$(DEPDIR)/emeralddb-pmdMain.Tpo"; exit 1; fi
#	source='pmd/pmdMain.cpp' object='emeralddb-pmdMain.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(emeralddb_CXXFLAGS) $(CXXFLAGS) -c -o emeralddb-pmdMain.obj `if test -f 'pmd/pmdMain.cpp'; then $(CYGPATH_W) 'pmd/pmdMain.cpp'; else $(CYGPATH_W) '$(srcdir)/pmd/pmdMain.cpp'; fi`

hello-bsonobj.o: bson/src/bsonobj.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -MT hello-bsonobj.o -MD -MP -MF "$(DEPDIR)/hello-bsonobj.Tpo" -c -o hello-bsonobj.o `test -f 'bson/src/bsonobj.cpp' || echo '$(srcdir)/'`bson/src/bsonobj.cpp; \
	then mv -f "$(DEPDIR)/hello-bsonobj.Tpo" "$(DEPDIR)/hello-bsonobj.Po"; else rm -f "$(DEPDIR)/hello-bsonobj.Tpo"; exit 1; fi
#	source='bson/src/bsonobj.cpp' object='hello-bsonobj.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -c -o hello-bsonobj.o `test -f 'bson/src/bsonobj.cpp' || echo '$(srcdir)/'`bson/src/bsonobj.cpp

hello-bsonobj.obj: bson/src/bsonobj.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -MT hello-bsonobj.obj -MD -MP -MF "$(DEPDIR)/hello-bsonobj.Tpo" -c -o hello-bsonobj.obj `if test -f 'bson/src/bsonobj.cpp'; then $(CYGPATH_W) 'bson/src/bsonobj.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/bsonobj.cpp'; fi`; \
	then mv -f "$(DEPDIR)/hello-bsonobj.Tpo" "$(DEPDIR)/hello-bsonobj.Po"; else rm -f "$(DEPDIR)/hello-bsonobj.Tpo"; exit 1; fi
#	source='bson/src/bsonobj.cpp' object='hello-bsonobj.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -c -o hello-bsonobj.obj `if test -f 'bson/src/bsonobj.cpp'; then $(CYGPATH_W) 'bson/src/bsonobj.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/bsonobj.cpp'; fi`

hello-json.o: bson/src/util/json.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -MT hello-json.o -MD -MP -MF "$(DEPDIR)/hello-json.Tpo" -c -o hello-json.o `test -f 'bson/src/util/json.cpp' || echo '$(srcdir)/'`bson/src/util/json.cpp; \
	then mv -f "$(DEPDIR)/hello-json.Tpo" "$(DEPDIR)/hello-json.Po"; else rm -f "$(DEPDIR)/hello-json.Tpo"; exit 1; fi
#	source='bson/src/util/json.cpp' object='hello-json.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -c -o hello-json.o `test -f 'bson/src/util/json.cpp' || echo '$(srcdir)/'`bson/src/util/json.cpp

hello-json.obj: bson/src/util/json.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -MT hello-json.obj -MD -MP -MF "$(DEPDIR)/hello-json.Tpo" -c -o hello-json.obj `if test -f 'bson/src/util/json.cpp'; then $(CYGPATH_W) 'bson/src/util/json.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/util/json.cpp'; fi`; \
	then mv -f "$(DEPDIR)/hello-json.Tpo" "$(DEPDIR)/hello-json.Po"; else rm -f "$(DEPDIR)/hello-json.Tpo"; exit 1; fi
#	source='bson/src/util/json.cpp' object='hello-json.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -c -o hello-json.obj `if test -f 'bson/src/util/json.cpp'; then $(CYGPATH_W) 'bson/src/util/json.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/util/json.cpp'; fi`

hello-oid.o: bson/src/oid.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -MT hello-oid.o -MD -MP -MF "$(DEPDIR)/hello-oid.Tpo" -c -o hello-oid.o `test -f 'bson/src/oid.cpp' || echo '$(srcdir)/'`bson/src/oid.cpp; \
	then mv -f "$(DEPDIR)/hello-oid.Tpo" "$(DEPDIR)/hello-oid.Po"; else rm -f "$(DEPDIR)/hello-oid.Tpo"; exit 1; fi
#	source='bson/src/oid.cpp' object='hello-oid.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -c -o hello-oid.o `test -f 'bson/src/oid.cpp' || echo '$(srcdir)/'`bson/src/oid.cpp

hello-oid.obj: bson/src/oid.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -MT hello-oid.obj -MD -MP -MF "$(DEPDIR)/hello-oid.Tpo" -c -o hello-oid.obj `if test -f 'bson/src/oid.cpp'; then $(CYGPATH_W) 'bson/src/oid.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/oid.cpp'; fi`; \
	then mv -f "$(DEPDIR)/hello-oid.Tpo" "$(DEPDIR)/hello-oid.Po"; else rm -f "$(DEPDIR)/hello-oid.Tpo"; exit 1; fi
#	source='bson/src/oid.cpp' object='hello-oid.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -c -o hello-oid.obj `if test -f 'bson/src/oid.cpp'; then $(CYGPATH_W) 'bson/src/oid.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/oid.cpp'; fi`

hello-base64.o: bson/src/lib/base64.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -MT hello-base64.o -MD -MP -MF "$(DEPDIR)/hello-base64.Tpo" -c -o hello-base64.o `test -f 'bson/src/lib/base64.cpp' || echo '$(srcdir)/'`bson/src/lib/base64.cpp; \
	then mv -f "$(DEPDIR)/hello-base64.Tpo" "$(DEPDIR)/hello-base64.Po"; else rm -f "$(DEPDIR)/hello-base64.Tpo"; exit 1; fi
#	source='bson/src/lib/base64.cpp' object='hello-base64.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -c -o hello-base64.o `test -f 'bson/src/lib/base64.cpp' || echo '$(srcdir)/'`bson/src/lib/base64.cpp

hello-base64.obj: bson/src/lib/base64.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -MT hello-base64.obj -MD -MP -MF "$(DEPDIR)/hello-base64.Tpo" -c -o hello-base64.obj `if test -f 'bson/src/lib/base64.cpp'; then $(CYGPATH_W) 'bson/src/lib/base64.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/lib/base64.cpp'; fi`; \
	then mv -f "$(DEPDIR)/hello-base64.Tpo" "$(DEPDIR)/hello-base64.Po"; else rm -f "$(DEPDIR)/hello-base64.Tpo"; exit 1; fi
#	source='bson/src/lib/base64.cpp' object='hello-base64.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -c -o hello-base64.obj `if test -f 'bson/src/lib/base64.cpp'; then $(CYGPATH_W) 'bson/src/lib/base64.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/lib/base64.cpp'; fi`

hello-md5.o: bson/src/lib/md5.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -MT hello-md5.o -MD -MP -MF "$(DEPDIR)/hello-md5.Tpo" -c -o hello-md5.o `test -f 'bson/src/lib/md5.cpp' || echo '$(srcdir)/'`bson/src/lib/md5.cpp; \
	then mv -f "$(DEPDIR)/hello-md5.Tpo" "$(DEPDIR)/hello-md5.Po"; else rm -f "$(DEPDIR)/hello-md5.Tpo"; exit 1; fi
#	source='bson/src/lib/md5.cpp' object='hello-md5.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -c -o hello-md5.o `test -f 'bson/src/lib/md5.cpp' || echo '$(srcdir)/'`bson/src/lib/md5.cpp

hello-md5.obj: bson/src/lib/md5.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -MT hello-md5.obj -MD -MP -MF "$(DEPDIR)/hello-md5.Tpo" -c -o hello-md5.obj `if test -f 'bson/src/lib/md5.cpp'; then $(CYGPATH_W) 'bson/src/lib/md5.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/lib/md5.cpp'; fi`; \
	then mv -f "$(DEPDIR)/hello-md5.Tpo" "$(DEPDIR)/hello-md5.Po"; else rm -f "$(DEPDIR)/hello-md5.Tpo"; exit 1; fi
#	source='bson/src/lib/md5.cpp' object='hello-md5.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -c -o hello-md5.obj `if test -f 'bson/src/lib/md5.cpp'; then $(CYGPATH_W) 'bson/src/lib/md5.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/lib/md5.cpp'; fi`

hello-nonce.o: bson/src/lib/nonce.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -MT hello-nonce.o -MD -MP -MF "$(DEPDIR)/hello-nonce.Tpo" -c -o hello-nonce.o `test -f 'bson/src/lib/nonce.cpp' || echo '$(srcdir)/'`bson/src/lib/nonce.cpp; \
	then mv -f "$(DEPDIR)/hello-nonce.Tpo" "$(DEPDIR)/hello-nonce.Po"; else rm -f "$(DEPDIR)/hello-nonce.Tpo"; exit 1; fi
#	source='bson/src/lib/nonce.cpp' object='hello-nonce.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -c -o hello-nonce.o `test -f 'bson/src/lib/nonce.cpp' || echo '$(srcdir)/'`bson/src/lib/nonce.cpp

hello-nonce.obj: bson/src/lib/nonce.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -MT hello-nonce.obj -MD -MP -MF "$(DEPDIR)/hello-nonce.Tpo" -c -o hello-nonce.obj `if test -f 'bson/src/lib/nonce.cpp'; then $(CYGPATH_W) 'bson/src/lib/nonce.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/lib/nonce.cpp'; fi`; \
	then mv -f "$(DEPDIR)/hello-nonce.Tpo" "$(DEPDIR)/hello-nonce.Po"; else rm -f "$(DEPDIR)/hello-nonce.Tpo"; exit 1; fi
#	source='bson/src/lib/nonce.cpp' object='hello-nonce.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -c -o hello-nonce.obj `if test -f 'bson/src/lib/nonce.cpp'; then $(CYGPATH_W) 'bson/src/lib/nonce.cpp'; else $(CYGPATH_W) '$(srcdir)/bson/src/lib/nonce.cpp'; fi`

hello-ossPrimitiveFileOp.o: oss/ossPrimitiveFileOp.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -MT hello-ossPrimitiveFileOp.o -MD -MP -MF "$(DEPDIR)/hello-ossPrimitiveFileOp.Tpo" -c -o hello-ossPrimitiveFileOp.o `test -f 'oss/ossPrimitiveFileOp.cpp' || echo '$(srcdir)/'`oss/ossPrimitiveFileOp.cpp; \
	then mv -f "$(DEPDIR)/hello-ossPrimitiveFileOp.Tpo" "$(DEPDIR)/hello-ossPrimitiveFileOp.Po"; else rm -f "$(DEPDIR)/hello-ossPrimitiveFileOp.Tpo"; exit 1; fi
#	source='oss/ossPrimitiveFileOp.cpp' object='hello-ossPrimitiveFileOp.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -c -o hello-ossPrimitiveFileOp.o `test -f 'oss/ossPrimitiveFileOp.cpp' || echo '$(srcdir)/'`oss/ossPrimitiveFileOp.cpp

hello-ossPrimitiveFileOp.obj: oss/ossPrimitiveFileOp.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -MT hello-ossPrimitiveFileOp.obj -MD -MP -MF "$(DEPDIR)/hello-ossPrimitiveFileOp.Tpo" -c -o hello-ossPrimitiveFileOp.obj `if test -f 'oss/ossPrimitiveFileOp.cpp'; then $(CYGPATH_W) 'oss/ossPrimitiveFileOp.cpp'; else $(CYGPATH_W) '$(srcdir)/oss/ossPrimitiveFileOp.cpp'; fi`; \
	then mv -f "$(DEPDIR)/hello-ossPrimitiveFileOp.Tpo" "$(DEPDIR)/hello-ossPrimitiveFileOp.Po"; else rm -f "$(DEPDIR)/hello-ossPrimitiveFileOp.Tpo"; exit 1; fi
#	source='oss/ossPrimitiveFileOp.cpp' object='hello-ossPrimitiveFileOp.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -c -o hello-ossPrimitiveFileOp.obj `if test -f 'oss/ossPrimitiveFileOp.cpp'; then $(CYGPATH_W) 'oss/ossPrimitiveFileOp.cpp'; else $(CYGPATH_W) '$(srcdir)/oss/ossPrimitiveFileOp.cpp'; fi`

hello-pd.o: pd/pd.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -MT hello-pd.o -MD -MP -MF "$(DEPDIR)/hello-pd.Tpo" -c -o hello-pd.o `test -f 'pd/pd.cpp' || echo '$(srcdir)/'`pd/pd.cpp; \
	then mv -f "$(DEPDIR)/hello-pd.Tpo" "$(DEPDIR)/hello-pd.Po"; else rm -f "$(DEPDIR)/hello-pd.Tpo"; exit 1; fi
#	source='pd/pd.cpp' object='hello-pd.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -c -o hello-pd.o `test -f 'pd/pd.cpp' || echo '$(srcdir)/'`pd/pd.cpp

hello-pd.obj: pd/pd.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -MT hello-pd.obj -MD -MP -MF "$(DEPDIR)/hello-pd.Tpo" -c -o hello-pd.obj `if test -f 'pd/pd.cpp'; then $(CYGPATH_W) 'pd/pd.cpp'; else $(CYGPATH_W) '$(srcdir)/pd/pd.cpp'; fi`; \
	then mv -f "$(DEPDIR)/hello-pd.Tpo" "$(DEPDIR)/hello-pd.Po"; else rm -f "$(DEPDIR)/hello-pd.Tpo"; exit 1; fi
#	source='pd/pd.cpp' object='hello-pd.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -c -o hello-pd.obj `if test -f 'pd/pd.cpp'; then $(CYGPATH_W) 'pd/pd.cpp'; else $(CYGPATH_W) '$(srcdir)/pd/pd.cpp'; fi`

hello-pmdHello.o: pmd/pmdHello.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -MT hello-pmdHello.o -MD -MP -MF "$(DEPDIR)/hello-pmdHello.Tpo" -c -o hello-pmdHello.o `test -f 'pmd/pmdHello.cpp' || echo '$(srcdir)/'`pmd/pmdHello.cpp; \
	then mv -f "$(DEPDIR)/hello-pmdHello.Tpo" "$(DEPDIR)/hello-pmdHello.Po"; else rm -f "$(DEPDIR)/hello-pmdHello.Tpo"; exit 1; fi
#	source='pmd/pmdHello.cpp' object='hello-pmdHello.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -c -o hello-pmdHello.o `test -f 'pmd/pmdHello.cpp' || echo '$(srcdir)/'`pmd/pmdHello.cpp

hello-pmdHello.obj: pmd/pmdHello.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -MT hello-pmdHello.obj -MD -MP -MF "$(DEPDIR)/hello-pmdHello.Tpo" -c -o hello-pmdHello.obj `if test -f 'pmd/pmdHello.cpp'; then $(CYGPATH_W) 'pmd/pmdHello.cpp'; else $(CYGPATH_W) '$(srcdir)/pmd/pmdHello.cpp'; fi`; \
	then mv -f "$(DEPDIR)/hello-pmdHello.Tpo" "$(DEPDIR)/hello-pmdHello.Po"; else rm -f "$(DEPDIR)/hello-pmdHello.Tpo"; exit 1; fi
#	source='pmd/pmdHello.cpp' object='hello-pmdHello.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CXXFLAGS) $(CXXFLAGS) -c -o hello-pmdHello.obj `if test -f 'pmd/pmdHello.cpp'; then $(CYGPATH_W) 'pmd/pmdHello.cpp'; else $(CYGPATH_W) '$(srcdir)/pmd/pmdHello.cpp'; fi`
uninstall-info-am:

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES) config.h.in $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS) config.h.in $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES) config.h.in $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS) config.h.in $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	$(am__remove_distdir)
	mkdir $(distdir)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
	-find $(distdir) -type d ! -perm -755 -exec chmod a+rwx,go+rx {} \; -o \
	  ! -type d ! -perm -444 -links 1 -exec chmod a+r {} \; -o \
	  ! -type d ! -perm -400 -exec chmod a+r {} \; -o \
	  ! -type d ! -perm -444 -exec $(SHELL) $(install_sh) -c -m a+r {} {} \; \
	|| chmod -R a+r $(distdir)
dist-gzip: distdir
	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz
	$(am__remove_distdir)

dist-bzip2: distdir
	tardir=$(distdir) && $(am__tar) | bzip2 -9 -c >$(distdir).tar.bz2
	$(am__remove_distdir)

dist-tarZ: distdir
	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z
	$(am__remove_distdir)

dist-shar: distdir
	shar $(distdir) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).shar.gz
	$(am__remove_distdir)

dist-zip: distdir
	-rm -f $(distdir).zip
	zip -rq $(distdir).zip $(distdir)
	$(am__remove_distdir)

dist dist-all: distdir
	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz
	$(am__remove_distdir)

# This target untars the dist file and tries a VPATH configuration.  Then
# it guarantees that the distribution is self-contained by making another
# tarfile.
distcheck: dist
	case '$(DIST_ARCHIVES)' in \
	*.tar.gz*) \
	  GZIP=$(GZIP_ENV) gunzip -c $(distdir).tar.gz | $(am__untar) ;;\
	*.tar.bz2*) \
	  bunzip2 -c $(distdir).tar.bz2 | $(am__untar) ;;\
	*.tar.Z*) \
	  uncompress -c $(distdir).tar.Z | $(am__untar) ;;\
	*.shar.gz*) \
	  GZIP=$(GZIP_ENV) gunzip -c $(distdir).shar.gz | unshar ;;\
	*.zip*) \
	  unzip $(distdir).zip ;;\
	esac
	chmod -R a-w $(distdir); chmod a+w $(distdir)
	mkdir $(distdir)/_build
	mkdir $(distdir)/_inst
	chmod a-w $(distdir)
	dc_install_base=`$(am__cd) $(distdir)/_inst && pwd | sed -e 's,^[^:\\/]:[\\/],/,'` \
	  && dc_destdir="$${TMPDIR-/tmp}/am-dc-$$$$/" \
	  && cd $(distdir)/_build \
	  && ../configure --srcdir=.. --prefix="$$dc_install_base" \
	    $(DISTCHECK_CONFIGURE_FLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) dvi \
	  && $(MAKE) $(AM_MAKEFLAGS) check \
	  && $(MAKE) $(AM_MAKEFLAGS) install \
	  && $(MAKE) $(AM_MAKEFLAGS) installcheck \
	  && $(MAKE) $(AM_MAKEFLAGS) uninstall \
	  && $(MAKE) $(AM_MAKEFLAGS) distuninstallcheck_dir="$$dc_install_base" \
	        distuninstallcheck \
	  && chmod -R a-w "$$dc_install_base" \
	  && ({ \
	       (cd ../.. && umask 077 && mkdir "$$dc_destdir") \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" install \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" uninstall \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" \
	            distuninstallcheck_dir="$$dc_destdir" distuninstallcheck; \
	      } || { rm -rf "$$dc_destdir"; exit 1; }) \
	  && rm -rf "$$dc_destdir" \
	  && $(MAKE) $(AM_MAKEFLAGS) dist \
	  && rm -rf $(DIST_ARCHIVES) \
	  && $(MAKE) $(AM_MAKEFLAGS) distcleancheck
	$(am__remove_distdir)
	@(echo "$(distdir) archives ready for distribution: "; \
	  list='$(DIST_ARCHIVES)'; for i in $$list; do echo $$i; done) | \
	  sed -e '1{h;s/./=/g;p;x;}' -e '$${p;x;}'
distuninstallcheck:
	@cd $(distuninstallcheck_dir) \
	&& test `$(distuninstallcheck_listfiles) | wc -l` -le 1 \
	   || { echo "ERROR: files left after uninstall:" ; \
	        if test -n "$(DESTDIR)"; then \
	          echo "  (check DESTDIR support)"; \
	        fi ; \
	        $(distuninstallcheck_listfiles) ; \
	        exit 1; } >&2
distcleancheck: distclean
	@if test '$(srcdir)' = . ; then \
	  echo "ERROR: distcleancheck can only run from a VPATH build" ; \
	  exit 1 ; \
	fi
	@test `$(distcleancheck_listfiles) | wc -l` -eq 0 \
	  || { echo "ERROR: files left in build directory after distclean:" ; \
	       $(distcleancheck_listfiles) ; \
	       exit 1; } >&2
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS) config.h
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(mkdir_p) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am
	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-hdr distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-exec-am: install-binPROGRAMS

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
	-rm -rf $(top_srcdir)/autom4te.cache
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS uninstall-info-am

.PHONY: CTAGS GTAGS all all-am am--refresh check check-am clean \
	clean-binPROGRAMS clean-generic ctags dist dist-all dist-bzip2 \
	dist-gzip dist-shar dist-tarZ dist-zip distcheck distclean \
	distclean-compile distclean-generic distclean-hdr \
	distclean-tags distcleancheck distdir distuninstallcheck dvi \
	dvi-am html html-am info info-am install install-am \
	install-binPROGRAMS install-data install-data-am install-exec \
	install-exec-am install-info install-info-am install-man \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic pdf pdf-am ps ps-am \
	tags uninstall uninstall-am uninstall-binPROGRAMS \
	uninstall-info-am

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
